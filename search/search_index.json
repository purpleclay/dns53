{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dns53 \u00b6 Dynamic DNS within Amazon Route 53. Expose your EC2 quickly, easily and privately within a Route 53 Private Hosted Zone (PHZ). Easily collaborate with a colleague by exposing your EC2 within a team VPC. You could even hook up a locally running application to a local k3d cluster using an ExternalName service during development. Once your EC2 is exposed, control how it is accessed through your EC2 security groups. Written in Go, dns53 is incredibly small and easy to install.","title":"Home"},{"location":"#dns53","text":"Dynamic DNS within Amazon Route 53. Expose your EC2 quickly, easily and privately within a Route 53 Private Hosted Zone (PHZ). Easily collaborate with a colleague by exposing your EC2 within a team VPC. You could even hook up a locally running application to a local k3d cluster using an ExternalName service during development. Once your EC2 is exposed, control how it is accessed through your EC2 security groups. Written in Go, dns53 is incredibly small and easy to install.","title":"dns53"},{"location":"cli/","text":"Command Line \u00b6 Usage \u00b6 dns53 [ options ] Options \u00b6 $ dns53 --help Dynamic DNS within Amazon Route53. Expose your EC2 quickly, easily and privately Usage: dns53 [ flags ] dns53 [ command ] Available Commands: completion Generate completion script for your target shell help Help about any command version Prints the build time version information Flags: -h, --help help for dns53 --phz-id string an ID of a Route53 private hosted zone to use when generating a record set --profile string the AWS named profile to use when loading credentials --region string the AWS region to use when querying AWS","title":"Command Line"},{"location":"cli/#command-line","text":"","title":"Command Line"},{"location":"cli/#usage","text":"dns53 [ options ]","title":"Usage"},{"location":"cli/#options","text":"$ dns53 --help Dynamic DNS within Amazon Route53. Expose your EC2 quickly, easily and privately Usage: dns53 [ flags ] dns53 [ command ] Available Commands: completion Generate completion script for your target shell help Help about any command version Prints the build time version information Flags: -h, --help help for dns53 --phz-id string an ID of a Route53 private hosted zone to use when generating a record set --profile string the AWS named profile to use when loading credentials --region string the AWS region to use when querying AWS","title":"Options"},{"location":"iam/","text":"IAM \u00b6 For dns53 to successfully manage a record set within a Route53 Private Hosted Zone, your IAM persona must have the following permissions granted: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Action\" : [ \"route53:GetHostedZone\" , \"route53:ChangeResourceRecordSets\" ], \"Resource\" : \"arn:aws:route53:::hostedzone/*\" }, { \"Effect\" : \"Allow\" , \"Action\" : [ \"route53:ListHostedZonesByVPC\" , \"ec2:DescribeVpcs\" ], \"Resource\" : \"*\" } ] }","title":"IAM"},{"location":"iam/#iam","text":"For dns53 to successfully manage a record set within a Route53 Private Hosted Zone, your IAM persona must have the following permissions granted: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Action\" : [ \"route53:GetHostedZone\" , \"route53:ChangeResourceRecordSets\" ], \"Resource\" : \"arn:aws:route53:::hostedzone/*\" }, { \"Effect\" : \"Allow\" , \"Action\" : [ \"route53:ListHostedZonesByVPC\" , \"ec2:DescribeVpcs\" ], \"Resource\" : \"*\" } ] }","title":"IAM"},{"location":"install/","text":"Install \u00b6 There are many different ways to install dns53. You can install the binary using either a supported package manager, manually, or by compiling the source yourself. Installing the binary \u00b6 Homebrew \u00b6 To use Homebrew : brew install purpleclay/tap/dns53 Scoop \u00b6 To use Scoop : scoop bucket add purpleclay https://github.com/purpleclay/scoop-bucket.git scoop install dns53 Apt \u00b6 To install using the apt package manager: echo 'deb [trusted=yes] https://fury.purpleclay.dev/apt/ /' | sudo tee /etc/apt/sources.list.d/purpleclay.list sudo apt update sudo apt install -y dns53 You may need to install the ca-certificates package if you encounter trust issues with regards to the gemfury certificate: sudo apt update && sudo apt install -y ca-certificates Yum \u00b6 To install using the yum package manager: echo '[purpleclay] name=purpleclay baseurl=https://fury.purpleclay.dev/yum/ enabled=1 gpgcheck=0' | sudo tee /etc/yum.repos.d/purpleclay.repo sudo yum install -y dns53 Aur \u00b6 To install from the aur using yay : yay -S dns53-bin Linux Packages \u00b6 Download and manually install one of the .deb , .rpm or .apk packages from the Releases page. Apt Yum Apk sudo apt install dns53_*.deb sudo yum localinstall dns53_*.rpm sudo apk add --no-cache --allow-untrusted dns53_*.apk Go Install \u00b6 go install github.com/purpleclay/dns53@latest Bash Script \u00b6 To install the latest version using a bash script: curl https://raw.githubusercontent.com/purpleclay/dns53/main/scripts/install | bash A specific version can be downloaded by using the -v flag. By default the script uses sudo , which can be turned off by using the --no-sudo flag. curl https://raw.githubusercontent.com/purpleclay/dns53/main/scripts/install | bash -s -- -v v0.1.0 --no-sudo Manually \u00b6 Binary downloads of dns53 can be found on the Releases page. Unpack the dns53 binary and add it to your PATH . Compiling from source \u00b6 dns53 is written using Go 1.18+ and should be installed along with go-task , as it is preferred over using make. Then clone the code from GitHub: git clone https://github.com/purpleclay/dns53.git cd dns53 Build dns53: task And check that everything works: ./dns53 version Verifying Artefacts \u00b6 All verification is carried out using cosign and it must be installed before proceeding. Binaries \u00b6 All binaries can be verified using the checksum file, which has been signed using cosign. Download the checksum files that need to be verified: curl -sL https://github.com/purpleclay/dns53/releases/download/v0.1.0/checksums.txt -O curl -sL https://github.com/purpleclay/dns53/releases/download/v0.1.0/checksums.txt.sig -O curl -sL https://github.com/purpleclay/dns53/releases/download/v0.1.0/checksums.txt.pem -O Verify the signature of the checksum file: cosign verify-blob --cert checksums.txt.pem --signature checksums.txt.sig checksums.txt Download any release artefact and verify its SHA256 signature matches the entry within the checksum file: sha256sum --ignore-missing -c checksums.txt Don't mix versions For checksum verification to work, all artefacts must be downloaded from the same release","title":"Install"},{"location":"install/#install","text":"There are many different ways to install dns53. You can install the binary using either a supported package manager, manually, or by compiling the source yourself.","title":"Install"},{"location":"install/#installing-the-binary","text":"","title":"Installing the binary"},{"location":"install/#homebrew","text":"To use Homebrew : brew install purpleclay/tap/dns53","title":"Homebrew"},{"location":"install/#scoop","text":"To use Scoop : scoop bucket add purpleclay https://github.com/purpleclay/scoop-bucket.git scoop install dns53","title":"Scoop"},{"location":"install/#apt","text":"To install using the apt package manager: echo 'deb [trusted=yes] https://fury.purpleclay.dev/apt/ /' | sudo tee /etc/apt/sources.list.d/purpleclay.list sudo apt update sudo apt install -y dns53 You may need to install the ca-certificates package if you encounter trust issues with regards to the gemfury certificate: sudo apt update && sudo apt install -y ca-certificates","title":"Apt"},{"location":"install/#yum","text":"To install using the yum package manager: echo '[purpleclay] name=purpleclay baseurl=https://fury.purpleclay.dev/yum/ enabled=1 gpgcheck=0' | sudo tee /etc/yum.repos.d/purpleclay.repo sudo yum install -y dns53","title":"Yum"},{"location":"install/#aur","text":"To install from the aur using yay : yay -S dns53-bin","title":"Aur"},{"location":"install/#linux-packages","text":"Download and manually install one of the .deb , .rpm or .apk packages from the Releases page. Apt Yum Apk sudo apt install dns53_*.deb sudo yum localinstall dns53_*.rpm sudo apk add --no-cache --allow-untrusted dns53_*.apk","title":"Linux Packages"},{"location":"install/#go-install","text":"go install github.com/purpleclay/dns53@latest","title":"Go Install"},{"location":"install/#bash-script","text":"To install the latest version using a bash script: curl https://raw.githubusercontent.com/purpleclay/dns53/main/scripts/install | bash A specific version can be downloaded by using the -v flag. By default the script uses sudo , which can be turned off by using the --no-sudo flag. curl https://raw.githubusercontent.com/purpleclay/dns53/main/scripts/install | bash -s -- -v v0.1.0 --no-sudo","title":"Bash Script"},{"location":"install/#manually","text":"Binary downloads of dns53 can be found on the Releases page. Unpack the dns53 binary and add it to your PATH .","title":"Manually"},{"location":"install/#compiling-from-source","text":"dns53 is written using Go 1.18+ and should be installed along with go-task , as it is preferred over using make. Then clone the code from GitHub: git clone https://github.com/purpleclay/dns53.git cd dns53 Build dns53: task And check that everything works: ./dns53 version","title":"Compiling from source"},{"location":"install/#verifying-artefacts","text":"All verification is carried out using cosign and it must be installed before proceeding.","title":"Verifying Artefacts"},{"location":"install/#binaries","text":"All binaries can be verified using the checksum file, which has been signed using cosign. Download the checksum files that need to be verified: curl -sL https://github.com/purpleclay/dns53/releases/download/v0.1.0/checksums.txt -O curl -sL https://github.com/purpleclay/dns53/releases/download/v0.1.0/checksums.txt.sig -O curl -sL https://github.com/purpleclay/dns53/releases/download/v0.1.0/checksums.txt.pem -O Verify the signature of the checksum file: cosign verify-blob --cert checksums.txt.pem --signature checksums.txt.sig checksums.txt Download any release artefact and verify its SHA256 signature matches the entry within the checksum file: sha256sum --ignore-missing -c checksums.txt Don't mix versions For checksum verification to work, all artefacts must be downloaded from the same release","title":"Binaries"}]}