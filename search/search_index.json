{"config":{"indexing":"full","jieba_dict":null,"jieba_dict_user":null,"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"<p>Dynamic DNS within Amazon Route 53. Expose your EC2 quickly, easily and privately within a Route 53 Private Hosted Zone (PHZ).</p> <p>Easily collaborate with a colleague by exposing your EC2 within a team VPC. You could even hook up a locally running application to a local k3d cluster using an ExternalName service during development. Once your EC2 is exposed, control how it is accessed through your EC2 security groups.</p> <p>Written in Go, <code>dns53</code> is incredibly small and easy to install.</p>","title":"dns53"},{"location":"cli/","text":"","title":"Command Line"},{"location":"cli/#usage","text":"<pre><code>dns53 [options]\n</code></pre>","title":"Usage"},{"location":"cli/#options","text":"<pre><code>$ dns53 --help\n\nDynamic DNS within Amazon Route 53. Expose your EC2 quickly, easily and\nprivately within a Route 53 Private Hosted Zone (PHZ).\n\nYour EC2 will be exposed through a dynamically generated resource record that\nwill automatically be deleted when dns53 exits. Let dns53 name your resource\nrecord for you, or customise it to your needs.\n\nBuilt using Bubbletea \ud83e\uddcb\n\nUsage:\n  dns53 [flags]\n  dns53 [command]\n\nExamples:\n  # Launch the TUI and use the wizard to select a PHZ\n  dns53\n\n  # Launch the TUI using a chosen PHZ, effectively skipping the wizard\n  dns53 --phz-id Z000000000ABCDEFGHIJK\n\n  # Launch the TUI with a given domain name\n  dns53 --domain-name custom.domain\n\n  # Launch the TUI with a templated domain name\n  dns53 --domain-name \"{{.IPv4}}.{{.Region}}\"\n\nAvailable Commands:\n  completion  Generate completion script for your target shell\n  help        Help about any command\n  version     Prints the build time version information\n\nFlags:\n      --domain-name string   assign a custom domain name when generating a\n                             record set\n  -h, --help                 help for dns53\n      --phz-id string        an ID of a Route53 private hosted zone to use when\n                             generating a record set\n      --profile string       the AWS named profile to use when loading\n                             credentials\n      --region string        the AWS region to use when querying AWS\n\nUse \"dns53 [command] --help\" for more information about a command.\n</code></pre>","title":"Options"},{"location":"iam/","text":"<p>For <code>dns53</code> to successfully manage a record set within a Route53 Private Hosted Zone, your IAM persona must have the following permissions granted:</p> <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\"route53:GetHostedZone\", \"route53:ChangeResourceRecordSets\"],\n      \"Resource\": \"arn:aws:route53:::hostedzone/*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\"route53:ListHostedZonesByVPC\", \"ec2:DescribeVpcs\"],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n</code></pre>","title":"IAM"},{"location":"install/","text":"<p>There are many different ways to install dns53. You can install the binary using either a supported package manager, manually, or by compiling the source yourself.</p>","title":"Install"},{"location":"install/#installing-the-binary","text":"","title":"Installing the binary"},{"location":"install/#homebrew","text":"<p>To use Homebrew:</p> <pre><code>brew install purpleclay/tap/dns53\n</code></pre>","title":"Homebrew"},{"location":"install/#scoop","text":"<p>To use Scoop:</p> <pre><code>scoop bucket add purpleclay https://github.com/purpleclay/scoop-bucket.git\nscoop install dns53\n</code></pre>","title":"Scoop"},{"location":"install/#apt","text":"<p>To install using the apt package manager:</p> <pre><code>echo 'deb [trusted=yes] https://fury.purpleclay.dev/apt/ /' | sudo tee /etc/apt/sources.list.d/purpleclay.list\nsudo apt update\nsudo apt install -y dns53\n</code></pre> <p>You may need to install the <code>ca-certificates</code> package if you encounter trust issues with regards to the gemfury certificate:</p> <pre><code>sudo apt update &amp;&amp; sudo apt install -y ca-certificates\n</code></pre>","title":"Apt"},{"location":"install/#yum","text":"<p>To install using the yum package manager:</p> <pre><code>echo '[purpleclay]\nname=purpleclay\nbaseurl=https://fury.purpleclay.dev/yum/\nenabled=1\ngpgcheck=0' | sudo tee /etc/yum.repos.d/purpleclay.repo\nsudo yum install -y dns53\n</code></pre>","title":"Yum"},{"location":"install/#aur","text":"<p>To install from the aur using yay:</p> <pre><code>yay -S dns53-bin\n</code></pre>","title":"Aur"},{"location":"install/#linux-packages","text":"<p>Download and manually install one of the <code>.deb</code>, <code>.rpm</code> or <code>.apk</code> packages from the Releases page.</p> AptYumApk   <pre><code>sudo apt install dns53_*.deb\n</code></pre>   <pre><code>sudo yum localinstall dns53_*.rpm\n</code></pre>   <pre><code>sudo apk add --no-cache --allow-untrusted dns53_*.apk\n</code></pre>","title":"Linux Packages"},{"location":"install/#go-install","text":"<pre><code>go install github.com/purpleclay/dns53@latest\n</code></pre>","title":"Go Install"},{"location":"install/#bash-script","text":"<p>To install the latest version using a bash script:</p> <pre><code>curl https://raw.githubusercontent.com/purpleclay/dns53/main/scripts/install | bash\n</code></pre> <p>A specific version can be downloaded by using the <code>-v</code> flag. By default the script uses <code>sudo</code>, which can be turned off by using the <code>--no-sudo</code> flag.</p> <pre><code>curl https://raw.githubusercontent.com/purpleclay/dns53/main/scripts/install | bash -s -- -v v0.1.0 --no-sudo\n</code></pre>","title":"Bash Script"},{"location":"install/#manually","text":"<p>Binary downloads of dns53 can be found on the Releases page. Unpack the dns53 binary and add it to your <code>PATH</code>.</p>","title":"Manually"},{"location":"install/#compiling-from-source","text":"<p>dns53 is written using Go 1.18+ and should be installed along with go-task, as it is preferred over using make.</p> <p>Then clone the code from GitHub:</p> <pre><code>git clone https://github.com/purpleclay/dns53.git\ncd dns53\n</code></pre> <p>Build dns53:</p> <pre><code>task\n</code></pre> <p>And check that everything works:</p> <pre><code>./dns53 version\n</code></pre>","title":"Compiling from source"},{"location":"install/#verifying-artefacts","text":"<p>All verification is carried out using cosign and it must be installed before proceeding.</p>","title":"Verifying Artefacts"},{"location":"install/#binaries","text":"<p>All binaries can be verified using the checksum file, which has been signed using cosign.</p> <ol> <li> <p>Download the checksum files that need to be verified:</p> <pre><code>curl -sL https://github.com/purpleclay/dns53/releases/download/v0.1.0/checksums.txt -O\ncurl -sL https://github.com/purpleclay/dns53/releases/download/v0.1.0/checksums.txt.sig -O\ncurl -sL https://github.com/purpleclay/dns53/releases/download/v0.1.0/checksums.txt.pem -O\n</code></pre> </li> <li> <p>Verify the signature of the checksum file:</p> <pre><code>cosign verify-blob --cert checksums.txt.pem --signature checksums.txt.sig checksums.txt\n</code></pre> </li> <li> <p>Download any release artefact and verify its SHA256 signature matches the entry within the checksum file:</p> <pre><code>sha256sum --ignore-missing -c checksums.txt\n</code></pre> </li> </ol>  <p>Don't mix versions</p> <p>For checksum verification to work, all artefacts must be downloaded from the same release</p>","title":"Binaries"},{"location":"quickstart/","text":"<p>It's really easy to get up and running with <code>dns53</code>. You can expose your EC2 in a matter of seconds. \u26a1</p>","title":"Quick Start"},{"location":"quickstart/#full-wizard","text":"<p>If you don't know which Amazon Private Hosted Zone to use, <code>dns53</code> provides a handy wizard.</p> <pre><code>dns53\n</code></pre>","title":"Full Wizard"},{"location":"quickstart/#i-have-a-phz-id","text":"<p>Skip the wizard and expose your EC2 straight away.</p> <pre><code>dns53 --phz-id Z000000000ABCDEFGHIJK\n</code></pre>","title":"I have a PHZ ID"},{"location":"quickstart/#custom-domain-name","text":"<p>If you want more control over the generated domain name for your exposed EC2, you have two options.</p> As isTemplated   <pre><code>dns53 --domain-name my.ec2\n</code></pre>   <pre><code>dns53 --domain-name \"{{.IPv4}}.{{.Region}}\"\n</code></pre>    <p><code>dns53</code> will automatically suffix any domain with <code>.dns53.&lt;R53_ROOT_DOMAIN&gt;</code></p>  <p>Why not try templating?</p> <p>A full list of fields supported by <code>dns53</code> templating can be found here</p>","title":"Custom Domain Name"},{"location":"template/","text":"<p><code>dns53</code> supports Go templating through a series of named fields. Using a templated field is as easy as writing <code>{{.IPv4}}</code>.</p>","title":"Go Templates"},{"location":"template/#ec2-metadata-fields","text":"Field Description     <code>.IPv4</code> the private IPv4 address assigned to the launched EC2 instance   <code>.Region</code> the region where the EC2 instance was launched   <code>.VPC</code> the VPC ID of where the EC2 instance was launched","title":"EC2 Metadata Fields"}]}